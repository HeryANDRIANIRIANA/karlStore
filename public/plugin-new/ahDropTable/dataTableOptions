L‚Äô√©v√©nement `page.dt` de DataTables est d√©clench√© **√† chaque changement de page** dans un tableau.

### Exemple d'utilisation :

```javascript
$('#example').on('page.dt', function () {
  console.log('La page a chang√©');
});
```

### D√©tails :

* `page.dt` est un √©v√©nement sp√©cifique de DataTables.
* Il est d√©clench√© **apr√®s** que la nouvelle page ait √©t√© affich√©e.
* Il peut √™tre utilis√© pour lancer un spinner, effectuer un suivi, mettre √† jour des √©l√©ments externes, etc.

Souhaites-tu intercepter ce changement *avant* ou *apr√®s* qu‚Äôil se produise ?

Pour ajouter une **colonne qui affiche les occurrences (num√©ros de ligne relatifs √† la pagination)** dans un DataTable, tu peux utiliser la **propri√©t√© `createdRow`** ou **une colonne d√©finie avec `render`** dans la config `columns`.

### ‚úÖ M√©thode recommand√©e : via `render` + `draw.dt`

Cela affiche le bon num√©ro m√™me apr√®s tri, recherche ou pagination.

```javascript
var table = $('#example').DataTable({
  columnDefs: [
    {
      targets: 0, // la 1√®re colonne (√† adapter si n√©cessaire)
      render: function (data, type, row, meta) {
        // Calcul de l'index en fonction de la pagination
        return meta.row + meta.settings._iDisplayStart + 1;
      }
    }
  ]
});
```

### √âtapes √† suivre :

1. **Ajoute une colonne vide dans ton HTML** (en 1√®re position ou ailleurs) :

```html
<table id="example">
  <thead>
    <tr>
      <th>#</th>
      <th>Nom</th>
      <th>Email</th>
      <!-- etc. -->
    </tr>
  </thead>
</table>
```

2. **Dans ta config DataTable**, utilise `render` pour g√©n√©rer dynamiquement l‚Äôindex visible.

---

### üîÅ Mise √† jour automatique sur changement de page

Avec ce code, la mise √† jour est automatique **√† chaque draw** (tri, recherche, pagination).

Souhaites-tu que ce num√©ro soit fixe (li√© √† la ligne dans la base) ou relatif √† l'affichage (par exemple 1 √† 10 pour la page 1) ?

Parfait ! Puisque tu ne veux **pas modifier le HTML manuellement** et que tu veux **ajouter une colonne avec une ic√¥ne de couleur diff√©rente √† chaque ligne affich√©e**, voici la solution **enti√®rement en JavaScript**, c√¥t√© DataTables.

---

### ‚úÖ Exemple complet : Ajouter dynamiquement une colonne d‚Äôic√¥ne color√©e

```javascript
// Initialisation du DataTable
var table = $('#example').DataTable({
  // On ajoute une colonne en premier (index 0) pour les ic√¥nes
  columnDefs: [
    {
      targets: 0,
      title: '', // titre vide
      orderable: false,
      searchable: false,
      className: 'text-center',
      render: function (data, type, row, meta) {
        // Couleurs cycliques (par exemple 5 couleurs)
        var couleurs = ['red', 'green', 'blue', 'orange', 'purple'];
        var couleur = couleurs[meta.row % couleurs.length];

        // Exemple avec une ic√¥ne font-awesome (fa-circle)
        return '<i class="fas fa-circle" style="color:' + couleur + ';"></i>';
      }
    }
  ],
  // On demande √† DataTables d'ajouter automatiquement une colonne √† gauche
  initComplete: function () {
    // Injecte dynamiquement une colonne vide au d√©but de chaque ligne (thead et tbody)
    $('#example thead tr').prepend('<th></th>');
    $('#example tbody tr').each(function () {
      $(this).prepend('<td></td>');
    });
  }
});
```

---

### üìå Pr√©requis :

* Inclure Font Awesome (pour l'ic√¥ne) via CDN :

```html
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
```

---

### R√©sultat :

* Une **colonne d‚Äôic√¥ne** appara√Æt automatiquement √† gauche.
* Chaque ligne a une **couleur diff√©rente** selon son index.
* Tu n‚Äôas rien √† ajouter dans le HTML manuellement.

Souhaites-tu que la couleur des ic√¥nes soit al√©atoire, cyclique, ou bas√©e sur des donn√©es sp√©cifiques de la ligne ?


Bien s√ªr ! Voici un rappel clair sur comment fonctionnent `hideCols` et `showCols` dans DataTables (en JavaScript pur, sans plugin suppl√©mentaire).

> ‚ö†Ô∏è Ces fonctions ne font pas partie de l‚ÄôAPI officielle de DataTables, mais elles peuvent √™tre comprises comme des usages de la m√©thode `.column().visible()`.

---

### ‚úÖ **Cacher une ou plusieurs colonnes :**

```javascript
// Cacher la colonne d'index 2 (troisi√®me colonne)
table.column(2).visible(false);

// Cacher plusieurs colonnes
[1, 3, 4].forEach(function(index) {
  table.column(index).visible(false);
});
```

---

### ‚úÖ **Afficher une ou plusieurs colonnes :**

```javascript
// Afficher la colonne d'index 2
table.column(2).visible(true);

// Afficher plusieurs colonnes
[1, 3, 4].forEach(function(index) {
  table.column(index).visible(true);
});
```

---

### üîÑ Astuce : basculer la visibilit√©

```javascript
var col = table.column(2);
col.visible(!col.visible());
```

---

### üß† √Ä retenir :

* `.column(index)` cible une colonne.
* `.visible(true|false)` l'affiche ou la cache.
* L'index commence √† 0 **et inclut toutes les colonnes**, visibles ou non.

Souhaites-tu encapsuler √ßa dans des fonctions `hideCols`/`showCols` personnalis√©es ?


Parfait ! Voici une version **compl√®te, autonome et dynamique** qui :

1. **Ajoute automatiquement** une colonne √† gauche pour les ic√¥nes color√©es (sans modifier le HTML).
2. **Met √† jour dynamiquement** les ic√¥nes √† chaque draw (pagination, tri, recherche...).
3. Utilise des **couleurs cycliques** et **Font Awesome** pour les ic√¥nes.

---

### ‚úÖ Exemple complet

```html
<!-- Font Awesome pour les ic√¥nes -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">

<table id="example" class="display" width="100%"></table>

<script>
  // Donn√©es fictives (remplace avec ton ajax ou autre source)
  var dataSet = [
    ["Alice", "alice@email.com"],
    ["Bob", "bob@email.com"],
    ["Charlie", "charlie@email.com"],
    ["David", "david@email.com"],
    ["Eva", "eva@email.com"]
  ];

  // Couleurs cycliques
  var couleurs = ['red', 'green', 'blue', 'orange', 'purple'];

  // Initialisation du DataTable
  var table = $('#example').DataTable({
    data: dataSet,
    columns: [
      { title: "Nom" },
      { title: "Email" }
    ],
    initComplete: function () {
      // Ins√®re dynamiquement un <th> pour l'ic√¥ne en t√™te
      $('#example thead tr').prepend('<th></th>');
    }
  });

  // √Ä chaque draw, injecte ou met √† jour les ic√¥nes
  table.on('draw.dt', function () {
    $('#example tbody tr').each(function (index) {
      var couleur = couleurs[index % couleurs.length];
      var icone = '<i class="fas fa-circle" style="color:' + couleur + '"></i>';

      // Si la cellule d'ic√¥ne n'existe pas encore, l'ajouter
      if ($(this).find('td.icon-col').length === 0) {
        $(this).prepend('<td class="icon-col text-center">' + icone + '</td>');
      } else {
        $(this).find('td.icon-col').html(icone);
      }
    });
  });
</script>
```

---

### üîç R√©sum√© :

* **Aucune modif manuelle dans le HTML**.
* **Colonne d'ic√¥ne ajout√©e automatiquement**.
* **Couleurs g√©r√©es dynamiquement** √† chaque draw.
* **Compatible avec des donn√©es dynamiques** (via Ajax, etc.).

Souhaites-tu qu‚Äôon passe cette logique en plugin jQuery r√©utilisable (ex: `$.fn.addIconColumn()`)?


Excellente id√©e üí°! On peut transformer cette logique en un **plugin jQuery r√©utilisable** qui fonctionne comme `feather.replace()`, par exemple :

```js
$.fn.addIconColumn();
```

---

### ‚úÖ R√©sultat final souhait√© :

* Tu initialises ton DataTable normalement.
* Ensuite tu appelles :

```js
$('#example').addIconColumn({
  columnIndex: 0,            // o√π ins√©rer la colonne (par d√©faut : 0)
  colors: ['red', 'green', 'blue'], // couleurs cycliques
  iconClass: 'fas fa-circle' // ic√¥ne Font Awesome
});
```

---

### üß© Plugin jQuery : `addIconColumn()`

```javascript
(function ($) {
  $.fn.addIconColumn = function (options) {
    var settings = $.extend({
      columnIndex: 0,
      colors: ['red', 'green', 'blue', 'orange', 'purple'],
      iconClass: 'fas fa-circle'
    }, options);

    var $table = this;
    var table = $table.DataTable();

    // Ajouter <th> si n√©cessaire
    if ($table.find('thead th.icon-head').length === 0) {
      var $theadRow = $table.find('thead tr');
      var iconHeader = $('<th class="icon-head"></th>');
      $theadRow.children().eq(settings.columnIndex).before(iconHeader);
    }

    // G√©rer les ic√¥nes √† chaque draw
    table.on('draw.dt', function () {
      $table.find('tbody tr').each(function (rowIndex) {
        var color = settings.colors[rowIndex % settings.colors.length];
        var iconHTML = '<i class="' + settings.iconClass + '" style="color:' + color + '"></i>';
        var $cells = $(this).children('td');

        // Si la cellule n'existe pas encore
        if ($cells.eq(settings.columnIndex).hasClass('icon-col') === false) {
          $('<td class="icon-col text-center">' + iconHTML + '</td>')
            .insertBefore($cells.eq(settings.columnIndex));
        } else {
          $cells.eq(settings.columnIndex).html(iconHTML);
        }
      });
    });

    // Forcer le premier draw si n√©cessaire
    table.draw(false);

    return this; // chainable
  };
})(jQuery);
```

---

### ‚úÖ Utilisation simple :

```html
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
```

```javascript
var table = $('#example').DataTable({
  data: [...],
  columns: [...]
});

// Appel du plugin apr√®s initialisation
$('#example').addIconColumn({
  colors: ['crimson', 'darkgreen', 'navy'],
  iconClass: 'fas fa-circle'
});
```

---

Souhaites-tu aussi un `destroy` propre pour retirer la colonne et nettoyer les √©v√©nements si on veut le d√©sactiver ?


Excellente id√©e üí°! On peut transformer cette logique en un **plugin jQuery r√©utilisable** qui fonctionne comme `feather.replace()`, par exemple :

```js
$.fn.addIconColumn();
```

---

### ‚úÖ R√©sultat final souhait√© :

* Tu initialises ton DataTable normalement.
* Ensuite tu appelles :

```js
$('#example').addIconColumn({
  columnIndex: 0,            // o√π ins√©rer la colonne (par d√©faut : 0)
  colors: ['red', 'green', 'blue'], // couleurs cycliques
  iconClass: 'fas fa-circle' // ic√¥ne Font Awesome
});
```

---

### üß© Plugin jQuery : `addIconColumn()`

```javascript
(function ($) {
  $.fn.addIconColumn = function (options) {
    var settings = $.extend({
      columnIndex: 0,
      colors: ['red', 'green', 'blue', 'orange', 'purple'],
      iconClass: 'fas fa-circle'
    }, options);

    var $table = this;
    var table = $table.DataTable();

    // Ajouter <th> si n√©cessaire
    if ($table.find('thead th.icon-head').length === 0) {
      var $theadRow = $table.find('thead tr');
      var iconHeader = $('<th class="icon-head"></th>');
      $theadRow.children().eq(settings.columnIndex).before(iconHeader);
    }

    // G√©rer les ic√¥nes √† chaque draw
    table.on('draw.dt', function () {
      $table.find('tbody tr').each(function (rowIndex) {
        var color = settings.colors[rowIndex % settings.colors.length];
        var iconHTML = '<i class="' + settings.iconClass + '" style="color:' + color + '"></i>';
        var $cells = $(this).children('td');

        // Si la cellule n'existe pas encore
        if ($cells.eq(settings.columnIndex).hasClass('icon-col') === false) {
          $('<td class="icon-col text-center">' + iconHTML + '</td>')
            .insertBefore($cells.eq(settings.columnIndex));
        } else {
          $cells.eq(settings.columnIndex).html(iconHTML);
        }
      });
    });

    // Forcer le premier draw si n√©cessaire
    table.draw(false);

    return this; // chainable
  };
})(jQuery);
```

---

### ‚úÖ Utilisation simple :

```html
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
```

```javascript
var table = $('#example').DataTable({
  data: [...],
  columns: [...]
});

// Appel du plugin apr√®s initialisation
$('#example').addIconColumn({
  colors: ['crimson', 'darkgreen', 'navy'],
  iconClass: 'fas fa-circle'
});
```

---

Souhaites-tu aussi un `destroy` propre pour retirer la colonne et nettoyer les √©v√©nements si on veut le d√©sactiver ?

